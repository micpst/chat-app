version: '3.4'

services:
  database:
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      APPLICATION_DB: ${APPLICATION_DB}
      APPLICATION_TEST_DB: ${APPLICATION_TEST_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ${PWD}/backend/db/:/docker-entrypoint-initdb.d/

  backend:
    build:
      context: ${PWD}/backend
      dockerfile: docker/Dockerfile-development
    environment:
      FLASK_ENV: ${FLASK_ENV}
      FLASK_CONFIG: ${FLASK_CONFIG}
      SECRET_KEY: ${SECRET_KEY}
      APPLICATION_DB: ${APPLICATION_DB}
      APPLICATION_TEST_DB: ${APPLICATION_TEST_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOSTNAME: "database"
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ${PWD}/backend/:/opt/code
    ports:
      - "5000:5000"
    depends_on:
      - database

  frontend:
    build:
      context: ${PWD}/frontend
      dockerfile: docker/Dockerfile-development
    environment:
      NODE_ENV: "development"
      CHOKIDAR_USEPOLLING: true
    volumes:
      - ${PWD}/frontend/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend

  nginx:
    image: nginx
    volumes:
      - ${PWD}/nginx/nginx-development.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend

volumes:
  pgdata: